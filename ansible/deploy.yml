- hosts: localhost
  gather_facts: no
  vars_files:
    - vars.yml
  tasks:
    - name: Ensure project directory exists locally
      file:
        path: "{{ project_path }}"
        state: directory

    - name: Ensure tmp directory exists locally
      file:
        path: "{{ project_path }}/tmp"
        state: directory

    - name: Build Docker image locally
      command: "docker build -t meetingbot:latest ."
      args:
        chdir: "{{ project_path }}"

    - name: Save Docker image as a tar archive locally
      command: "docker save meetingbot:latest -o meetingbot.tar"
      args:
        chdir: "{{ project_path }}"

    - name: Check if tar file exists on the remote server
      stat:
        path: "{{ image_dest_path }}"
      delegate_to: server
      register: tar_exists

    - name: Remove old tar file on the remote server if it exists
      file:
        path: "{{ image_dest_path }}"
        state: absent
      delegate_to: server
      when: tar_exists.stat.exists

    - name: Copy Docker image to the remote server
      copy:
        src: "{{ project_path }}/meetingbot.tar"
        dest: "{{ image_dest_path }}"
      delegate_to: server

    - name: Remove local tar file after copying to remote server
      file:
        path: "{{ project_path }}/meetingbot.tar"
        state: absent

    - name: Remove local meetingbot.jar
      file:
        path: "{{ project_path }}/target/meetingbot-0.0.1-SNAPSHOT.jar"
        state: absent

    - name: Remove local Docker image
      command: "docker rmi meetingbot:latest"

- hosts: prod
  gather_facts: no
  vars_files:
    - vars.yml
  become: yes
  become_method: sudo
  become_user: root
  tasks:
    - name: Ensure {{ dest_path }}/tmp directory exists on the remote server
      file:
        path: "{{ dest_path }}/tmp"
        state: directory

    - name: Set permissions on the remote tmp directory
      file:
        path: "{{ dest_path }}/tmp"
        state: directory
        mode: '0777'
        recurse: yes

    - name: Load Docker image on the remote server
      command: "docker load -i {{ image_dest_path }}"
      register: docker_load_result
      failed_when: docker_load_result.rc != 0

    - name: Run Docker container
      docker_container:
        name: meetingbot
        image: meetingbot:latest
        state: started
        restart_policy: on-failure
        ports:
          - "8080:8080"
        volumes:
          - "{{ dest_path }}/tmp:/app/tmp"
